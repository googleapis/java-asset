/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/asset/v1/asset_service.proto

package com.google.cloud.asset.v1;

public interface AnalyzeIamPolicyRequestOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.asset.v1.AnalyzeIamPolicyRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * The request query.
   * </pre>
   *
   * <code>
   * .google.cloud.asset.v1.IamPolicyAnalysisQuery analysis_query = 1 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return Whether the analysisQuery field is set.
   */
  boolean hasAnalysisQuery();
  /**
   *
   *
   * <pre>
   * The request query.
   * </pre>
   *
   * <code>
   * .google.cloud.asset.v1.IamPolicyAnalysisQuery analysis_query = 1 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return The analysisQuery.
   */
  com.google.cloud.asset.v1.IamPolicyAnalysisQuery getAnalysisQuery();
  /**
   *
   *
   * <pre>
   * The request query.
   * </pre>
   *
   * <code>
   * .google.cloud.asset.v1.IamPolicyAnalysisQuery analysis_query = 1 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   */
  com.google.cloud.asset.v1.IamPolicyAnalysisQueryOrBuilder getAnalysisQueryOrBuilder();

  /**
   *
   *
   * <pre>
   * Amount of time executable has to complete.  See JSON representation of
   * [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json).
   * If this field is set with a value less than the RPC deadline, and the
   * execution of your query hasn't finished in the specified
   * execution timeout,  you will get a response with partial result.
   * Otherwise, your query's execution will continue until the RPC deadline.
   * If it's not finished until then, you will get a  DEADLINE_EXCEEDED error.
   * Default is empty.
   * (-- We had discussion of whether we should have this field in the    --)
   * (-- request or use the RPC deadline instead. We finally choose this  --)
   * (-- approach for the following reasons (detailed in                  --)
   * (-- go/analyze-iam-policy-deadlines):                                --)
   * (-- * HTTP clients have very limited support of the RPC deadline.    --)
   * (--   There is an X-Server-Timeout header introduced in 2019/09, but --)
   * (--   only implemented in the C++ HTTP server library.               --)
   * (-- * The purpose of the RPC deadline is for RPC clients to          --)
   * (--   communicate its max waiting time to the server. This deadline  --)
   * (--   could be further propagated to the downstream servers. It is   --)
   * (--   mainly used for servers to cancel the request processing       --)
   * (--   to avoid resource wasting. Overloading the RPC deadline for    --)
   * (--   other purposes could make our backend system harder to reason  --)
   * (--   about.                                                         --)
   * </pre>
   *
   * <code>
   * .google.protobuf.Duration execution_timeout = 2 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return Whether the executionTimeout field is set.
   */
  boolean hasExecutionTimeout();
  /**
   *
   *
   * <pre>
   * Amount of time executable has to complete.  See JSON representation of
   * [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json).
   * If this field is set with a value less than the RPC deadline, and the
   * execution of your query hasn't finished in the specified
   * execution timeout,  you will get a response with partial result.
   * Otherwise, your query's execution will continue until the RPC deadline.
   * If it's not finished until then, you will get a  DEADLINE_EXCEEDED error.
   * Default is empty.
   * (-- We had discussion of whether we should have this field in the    --)
   * (-- request or use the RPC deadline instead. We finally choose this  --)
   * (-- approach for the following reasons (detailed in                  --)
   * (-- go/analyze-iam-policy-deadlines):                                --)
   * (-- * HTTP clients have very limited support of the RPC deadline.    --)
   * (--   There is an X-Server-Timeout header introduced in 2019/09, but --)
   * (--   only implemented in the C++ HTTP server library.               --)
   * (-- * The purpose of the RPC deadline is for RPC clients to          --)
   * (--   communicate its max waiting time to the server. This deadline  --)
   * (--   could be further propagated to the downstream servers. It is   --)
   * (--   mainly used for servers to cancel the request processing       --)
   * (--   to avoid resource wasting. Overloading the RPC deadline for    --)
   * (--   other purposes could make our backend system harder to reason  --)
   * (--   about.                                                         --)
   * </pre>
   *
   * <code>
   * .google.protobuf.Duration execution_timeout = 2 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   *
   * @return The executionTimeout.
   */
  com.google.protobuf.Duration getExecutionTimeout();
  /**
   *
   *
   * <pre>
   * Amount of time executable has to complete.  See JSON representation of
   * [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json).
   * If this field is set with a value less than the RPC deadline, and the
   * execution of your query hasn't finished in the specified
   * execution timeout,  you will get a response with partial result.
   * Otherwise, your query's execution will continue until the RPC deadline.
   * If it's not finished until then, you will get a  DEADLINE_EXCEEDED error.
   * Default is empty.
   * (-- We had discussion of whether we should have this field in the    --)
   * (-- request or use the RPC deadline instead. We finally choose this  --)
   * (-- approach for the following reasons (detailed in                  --)
   * (-- go/analyze-iam-policy-deadlines):                                --)
   * (-- * HTTP clients have very limited support of the RPC deadline.    --)
   * (--   There is an X-Server-Timeout header introduced in 2019/09, but --)
   * (--   only implemented in the C++ HTTP server library.               --)
   * (-- * The purpose of the RPC deadline is for RPC clients to          --)
   * (--   communicate its max waiting time to the server. This deadline  --)
   * (--   could be further propagated to the downstream servers. It is   --)
   * (--   mainly used for servers to cancel the request processing       --)
   * (--   to avoid resource wasting. Overloading the RPC deadline for    --)
   * (--   other purposes could make our backend system harder to reason  --)
   * (--   about.                                                         --)
   * </pre>
   *
   * <code>
   * .google.protobuf.Duration execution_timeout = 2 [(.google.api.field_behavior) = OPTIONAL];
   * </code>
   */
  com.google.protobuf.DurationOrBuilder getExecutionTimeoutOrBuilder();
}
